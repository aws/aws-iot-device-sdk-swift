name: CI

on:
    push:
        branches-ignore:
            - 'main'
            - 'docs'

env:
    BUILDER_VERSION: v0.9.77
    BUILDER_SOURCE: releases
    BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
    PACKAGE_NAME: aws-iot-device-sdk-swift
    RUN: ${{ github.run_id }}-${{ github.run_number }}
    AWS_DEFAULT_REGION: us-east-1
    CI_DEVICEFARM_ROLE: arn:aws:iam::180635532705:role/CI_DeviceFarm_IOS_Test
    CI_UTILS_FOLDER:  "./Scripts"
    CI_SAMPLES_CFG_FOLDER: ".github/workflows/sample_cfg"
    CI_PUBSUB_ROLE: arn:aws:iam::180635532705:role/CI_PubSub_Role
    CI_COGNITO_ROLE: arn:aws:iam::180635532705:role/CI_Cognito_Role
    CI_X509_ROLE: arn:aws:iam::180635532705:role/CI_X509_Role
    CI_CUSTOM_AUTHORIZER_ROLE: arn:aws:iam::180635532705:role/CI_CustomAuthorizer_Role
    CI_MQTT5_ROLE: arn:aws:iam::180635532705:role/CI_MQTT5_Role
    CI_BUILD_AND_TEST_ROLE: arn:aws:iam::180635532705:role/V2_SDK_Unit_Testing
    CI_CRT: arn:aws:iam::123124136734:role/CRT_CI_Role

jobs:
    linux:
      runs-on: ubuntu-24.04
      strategy:
        fail-fast: false
        matrix:
          image:
            - ubuntu-x64
            - al2-x64
            # issue to fix centos opened against apple here: https://github.com/apple/swift-docker/issues/258
            # - centos-x64
      permissions:
        id-token: write
        contents: read # This is required for actions/checkout
      steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.CI_CRT }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }} 
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          aws s3 cp --debug s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-swift-5-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}

    macos:
      runs-on: ${{ matrix.runner }}
      env:
        DEVELOPER_DIR: /Applications/Xcode.app
        XCODE_DESTINATION: 'OS X'
        NSUnbufferedIO: YES
      strategy:
        fail-fast: false
        matrix:
          # This matrix runs tests on Mac, on oldest & newest supported Xcodes
          runner:
            - macos-13 # x64
            - macos-14
            - macos-13-xlarge
            - macos-14-large #x64
      permissions:
        id-token: write
        contents: read # This is required for actions/checkout
      steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.CI_BUILD_AND_TEST_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }} 
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        run: |
          python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
          chmod a+x builder
          ./builder build -p ${{ env.PACKAGE_NAME }}

    devices:
      runs-on: ${{ matrix.runner }}
      env:
        DEVELOPER_DIR: /Applications/${{ matrix.xcode }}.app/Contents/Developer
        XCODE_DESTINATION: ${{matrix.target.destination}}
        NSUnbufferedIO: YES
      strategy:
        fail-fast: false
        matrix:
          # This matrix runs tests on iOS and tvOS on oldest & newest supported Xcodes
          runner:
            - macos-14
            - macos-14-large #x64
          target:
            [{ os: ios, destination: 'iOS Simulator,OS=16.1,name=iPhone 14'},
            { os: ios, destination: 'iOS Simulator,OS=17.2,name=iPhone 15'},
            { os: tvos, destination: 'tvOS Simulator,OS=16.1,name=Apple TV 4K (3rd generation) (at 1080p)'},
            { os: tvos, destination: 'tvOS Simulator,OS=17.2,name=Apple TV 4K (3rd generation) (at 1080p)'}]
          xcode:
            - Xcode_14.1
            - Xcode_15.2
          exclude:
            # Don't run old macOS with new Xcode
            - runner: macos-13-xlarge
              xcode: Xcode_15.2
            - runner: macos-13
              xcode: Xcode_15.2
            - runner: macos-13-xlarge
              target: { os: ios, destination: 'iOS Simulator,OS=16.1,name=iPhone 14'}
            - runner: macos-13
              target: { os: ios, destination: 'iOS Simulator,OS=16.1,name=iPhone 14'}
            # Don't run new macOS with old Xcode
            - runner: macos-14-large
              xcode: Xcode_14.1
            - runner: macos-14
              xcode: Xcode_14.1
            # Don't run old simulators with new Xcode
            - target: { os: tvos, destination: 'tvOS Simulator,OS=16.1,name=Apple TV 4K (3rd generation) (at 1080p)'}
              xcode: Xcode_15.2
            - target: { os: ios, destination: 'iOS Simulator,OS=16.1,name=iPhone 14'}
              xcode: Xcode_15.2
            # Don't run new simulators with old Xcode
            - target: { os: tvos, destination: 'tvOS Simulator,OS=17.2,name=Apple TV 4K (3rd generation) (at 1080p)'}
              xcode: Xcode_14.1
            - target: { os: ios, destination: 'iOS Simulator,OS=17.2,name=iPhone 15'}
              xcode: Xcode_14.1
      permissions:
        id-token: write
      steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.CI_BUILD_AND_TEST_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }} 
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        run: |
          python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
          chmod a+x builder
          ./builder build -p ${{ env.PACKAGE_NAME }} --target=${{ matrix.target.os }}-armv8

    smoke-test:
        runs-on: ${{ matrix.runner }}
        strategy:
            matrix:
                runner:
                    - macos-13
                    - macos-latest
        permissions:
            id-token: write
            contents: read # This is required for actions/checkout
        steps:
            - name: Checkout Source
              uses: actions/checkout@v4
              with:
                submodules: true
                fetch-depth: 0
            - name: Install boto3
              run: |
                python3 -m venv .venv
                source .venv/bin/activate
                python3 -m pip install boto3
            - name: configure AWS credentials (containers)
              uses: aws-actions/configure-aws-credentials@v2
              with:
                role-to-assume: ${{ env.CI_MQTT5_ROLE }}
                aws-region: ${{ env.AWS_DEFAULT_REGION }}
            - name: run CertAndKeyFileConnectSample sample
              run: |
                source .venv/bin/activate
                python3 ${{ env.CI_UTILS_FOLDER }}/SmokeTests/run_sample_ci.py --file ${{ env.CI_SAMPLES_CFG_FOLDER }}/ci_run_cert_key_file_connect_cfg.json            
            # The Pkcs12Connect sample on macOS requires keychain access. This codepath is tested in aws-iot-device-sdk-cpp-v2 as we are able to codesign the binary there.
            # - name: run Pkcs12Connect sample
            #   run: |
            #     pwd
            #     cert=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/mqtt5/us/mqtt5_thing/cert" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\") && echo -e "$cert" > /tmp/certificate.pem
            #     key=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/mqtt5/us/mqtt5_thing/key" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\") && echo -e "$key" > /tmp/privatekey.pem
            #     pkcs12_password=derp
            #     openssl pkcs12 -export -in /tmp/certificate.pem -inkey /tmp/privatekey.pem -out /tmp/pkcs12-key.p12 -name PubSub_Thing_Alias -password pass:$pkcs12_password
            #     source .venv/bin/activate
            #     python3 ${{ env.CI_UTILS_FOLDER }}/SmokeTests/run_sample_ci.py --file ${{ env.CI_SAMPLES_CFG_FOLDER }}/ci_run_pkcs12_connect_cfg.json
            - name: run Sigv4Auth Sample
              run: |
                source .venv/bin/activate
                python3 ${{ env.CI_UTILS_FOLDER }}/SmokeTests/run_sample_ci.py --file ${{ env.CI_SAMPLES_CFG_FOLDER }}/ci_run_sigv4_websocket_connect_cfg.json
            - name: run CustomAuth Sample
              run: |
                source .venv/bin/activate
                python3 ${{ env.CI_UTILS_FOLDER }}/SmokeTests/run_sample_ci.py --file ${{ env.CI_SAMPLES_CFG_FOLDER }}/ci_run_custom_authorizer_cfg.json
            - name: configure AWS credentials (COGNITO PROVIDER)
              uses: aws-actions/configure-aws-credentials@v2
              with:
                role-to-assume: ${{ env.CI_COGNITO_ROLE }}
                aws-region: ${{ env.AWS_DEFAULT_REGION }}
            - name: run CognitoWebsocketConnect sample
              run: |
                source .venv/bin/activate
                python3 ${{ env.CI_UTILS_FOLDER }}/SmokeTests/run_sample_ci.py --file ${{ env.CI_SAMPLES_CFG_FOLDER }}/ci_run_cognito_provider_websocket_connect_cfg.json            
    
    ios-device-farm:
        runs-on: macos-14
        permissions:
            id-token: write # This is required for requesting the JWT
            contents: read # This is required for actions/checkout
        env:
            DEVELOPER_DIR: /Applications/Xcode.app
            XCODE_DESTINATION: 'OS X'
            NSUnbufferedIO: YES
        strategy:
            matrix:
              # This matrix runs tests on iOS and tvOS on oldest & newest supported Xcodes
              device_pool:
                - iOSHighlyAvailablePool
                - iOS13PoolArn
        steps:
            - name: Checkout Source
              uses: actions/checkout@v4
              with:
                submodules: true
                fetch-depth: 0
            - name: configure AWS credentials (containers)
              uses: aws-actions/configure-aws-credentials@v2
              with:
                role-to-assume: ${{ env.CI_DEVICEFARM_ROLE }}
                aws-region: ${{ env.AWS_DEFAULT_REGION }}
            - name: Install the Apple certificate and provisioning profile
              run: |
                CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
                PP_PATH=$RUNNER_TEMP/mqttclient.mobileprovision
                KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
                aws s3 cp s3://iot-sdk-ci-bucket-us-east1/AppleDeveloperCertificate.p12 $CERTIFICATE_PATH
                aws s3 cp s3://iot-sdk-ci-bucket-us-east1/aws-common-runtime.MqttClient.mobileprovision $PP_PATH
                pkcs12_identity_pw=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/ios/pkcs12_identity_password" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\")
                # create temporary keychain
                security create-keychain -p "$pkcs12_identity_pw" $KEYCHAIN_PATH
                security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
                security unlock-keychain -p "$pkcs12_identity_pw" $KEYCHAIN_PATH
                # import certificate to keychain
                security import $CERTIFICATE_PATH -P "$pkcs12_identity_pw" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
                security list-keychain -d user -s $KEYCHAIN_PATH
                # apply provisioning profile        
                mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
            - name : Setup iOS App Credentials
              run : |
                cd Samples/iOS/iOSPubSubSample/MqttClient/
                ENDPOINT=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "unit-test/endpoint" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\")
                cert=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/mqtt5/us/Mqtt5Prod/cert" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\") && echo -e "$cert" > ./cert.pem
                key=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/mqtt5/us/Mqtt5Prod/key" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\") && echo -e "$key" > ./privatekey.pem
                sed -i '' "s/<endpoint>/${ENDPOINT}/g" ContentView.swift
            - name: Build Test App
              run: |
                xcode-select --print-path
                cd Samples/iOS/iOSPubSubSample/
                ls ~/Library/MobileDevice/Provisioning\ Profiles
                xcodebuild -resolvePackageDependencies
                echo "start build app"
                xcodebuild -scheme "MqttClient" \
                -archivePath $RUNNER_TEMP/MqttClient.xcarchive \
                -configuration Release \
                -destination generic/platform=iOS \
                clean archive -allowProvisioningUpdates
            - name: Export ipa
              run: |
                cd Samples/iOS/iOSPubSubSample/
                aws s3 cp s3://iot-sdk-ci-bucket-us-east1/ExportOptions.plist ExportOptions.plist
                xcodebuild -exportArchive -archivePath $RUNNER_TEMP/MqttClient.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $RUNNER_TEMP/output
                cd $RUNNER_TEMP/output
                ls
            - name: Setup Device Farm test file and environment
            # Device Farm Instructions: https://docs.aws.amazon.com/devicefarm/latest/developerguide/test-types-appium.html
              run: |
                cd Samples/iOS/iOSPubSubSample/
                pwd
                pip install virtualenv
                virtualenv --help
                virtualenv workspace
                cd workspace
                source bin/activate
                ls ../../../../
                pip install -r ../../../../Scripts/DeviceFarmScripts/requirements.txt
                # Create a test bundle folder for upload
                mkdir tests
                cp ../../../../Scripts/DeviceFarmScripts/mqtt_ios_test.py tests/
                find tests/
                py.test --collect-only tests/
                cd tests/
                find . -name '__pycache__' -type d -exec rm -r {} +
                find . -name '*.pyc' -exec rm -f {} +
                find . -name '*.pyo' -exec rm -f {} +
                find . -name '*~' -exec rm -f {} +
                cd ..
                pip freeze > requirements.txt
                zip -r test_bundle.zip tests/ requirements.txt
            - name: configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-region: us-west-2 # Device Farm only available on us-west-2
            - name: Execute device farm
              run: |
                cd Scripts/DeviceFarmScripts/
                pip install -r ./requirements.txt
                ls
                python ./run_ios_ci.py \
                --run_id ${{ github.run_id }} \
                --run_attempt ${{ github.run_attempt }} \
                --project_arn $(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/DeviceFarm/iOSProjectArn" --query "SecretString" | cut -f2 -d\") \
                --device_pool_arn $(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/DeviceFarm/${{ matrix.device_pool }}" --query "SecretString" | cut -f2 -d\") \
                --app_file_path $RUNNER_TEMP/output/MqttClient.ipa \
                --test_file_path ../../Samples/iOS/iOSPubSubSample//workspace/test_bundle.zip \
                --test_spec_file_path ./test_spec.yml
